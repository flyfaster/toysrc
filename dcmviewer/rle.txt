     Meta Element Group Length (0002,0000)  1    UL [138]
 File Meta Information Version (0002,0001)  1    OB [2 * 1 bytes at offset 156 (0x9c) in US-PAL-8-10x-echo using bflags 0x2901 (has |little endian|str_size_2|explicit_hint|)]
   Media Storage SOP Class UID (0002,0002)  1    UI [1.2.840.10008.5.1.4.1.1.3.1]
Media Storage SOP Instance UID (0002,0003)  1    UI [999.999.133.1996.1.1800.1.6.25]
           Transfer Syntax UID (0002,0010)  1    UI [1.2.840.10008.1.2.5]   P05 Annex G Encapsulated RLE Compressed Images
      Implementation Class UID (0002,0012)  1    UI [999.999.332346]
      Identifying Group Length (0008,0000)  1    UL [202]
                 SOP Class UID (0008,0016)  1    UI [1.2.840.10008.5.1.4.1.1.3.1]
              SOP Instance UID (0008,0018)  1    UI [999.999.133.1996.1.1800.1.6.25]
                    Study Date (0008,0020)  1    DA [1994.01.30]
                    Study Time (0008,0030)  1    TM [11:25:01]
                      Modality (0008,0060)  1    CS [US]
                  Manufacturer (0008,0070)  1    LO [ACME Products]
    Referring Physician's Name (0008,0090)  1    PN [Anonymized]
             Study Description (0008,1030)  1    LO [Echocardiogram]
            Series Description (0008,103E)  1    LO [PS LAX MR & AI]
          Patient Group Length (0010,0000)  1    UL [18]
                Patient's Name (0010,0010)  1    PN [Anonymized]
      Acquisition Group Length (0018,0000)  1    UL [18]
                    Frame Time (0018,1063)  1    DS [76.000000]
     Relationship Group Length (0020,0000)  1    UL [70]
            Study Instance UID (0020,000D)  1    UI [999.999.3859744]
           Series Instance UID (0020,000E)  1    UI [999.999.94827453]
                 Series Number (0020,0011)  1    IS [5829]
Instance (form...Image) Number (0020,0013)  1    IS [24]
Image Presenta... Group Length (0028,0000)  1    UL [1754]
             Samples per Pixel (0028,0002)  1    US [1]
    Photometric Interpretation (0028,0004)  1    CS [PALETTE COLOR]
              Number of Frames (0028,0008)  1    IS [10]
       Frame Increment Pointer (0028,0009)  1-n  AT [(0018,1063)]
                          Rows (0028,0010)  1    US [430]
                       Columns (0028,0011)  1    US [600]
                Bits Allocated (0028,0100)  1    US [8]
                   Bits Stored (0028,0101)  1    US [8]
                      High Bit (0028,0102)  1    US [7]
          Pixel Representation (0028,0103)  1    US [0]
Red Palette Co...le Descriptor (0028,1101)  3    US [256, 0, 16]
Green Palette ...le Descriptor (0028,1102)  3    US [256, 0, 16]
Blue Palette C...le Descriptor (0028,1103)  3    US [256, 0, 16]
Palette Color Lookup Table UID (0028,1199)  1    UI [999.999.389972238]
Red Palette Co...up Table Data (0028,1201)  1-n  OW [256 * 2 bytes at offset 844 (0x34c) in US-PAL-8-10x-echo using bflags 0x1901 (has |little endian|str_size_2|explicit_hint|)]
Green Palette ...up Table Data (0028,1202)  1-n  OW [256 * 2 bytes at offset 1368 (0x558) in US-PAL-8-10x-echo using bflags 0x1901 (has |little endian|str_size_2|explicit_hint|)]
Blue Palette C...up Table Data (0028,1203)  1-n  OW [256 * 2 bytes at offset 1892 (0x764) in US-PAL-8-10x-echo using bflags 0x1901 (has |little endian|str_size_2|explicit_hint|)]
       Pixel Data Group Length (7FE0,0000)  1    UL [481194]
                    Pixel Data (7FE0,0010)  1    OB [481182 * 1 bytes at offset 2428 (0x97c) in US-PAL-8-10x-echo using bflags 0x1901 (has |little endian|str_size_2|explicit_hint|)]

RUN-LENGTH ENCODING 
Run-length encoding is a very simple, intuitive, and fairly effective compression scheme for bitmapped graphics. Its main concept is to detect repeating pixels on each row of an image and output them as a pixel count and pixel value pair, instead of outputting the repeated pixels individually. RLE encoding does not do well for stipple patterns or scanned images, which do not have repeating pixels in rows - the encoding for these types of images may actually be larger after RLE encoding. Despite this limitation, RLE is very good for other types of images, and is supported by the BMP, TIFF, and Apple MacPaint file formats, as well as many others. 

When doing run-length encoding, all of the original data is scanned in rows and converted into count byte - data group pairs. There are two types of groupings that may be done. The first is a run, which is a group of repeating pixel values. This is encoded as a count of pixels followed by the pixel value. The second type of grouping is a sequence, which is a group of non-repeating bytes. This is encoded as a count of pixels followed by the pixel values. All runs and sequences may not extend past the end of a scan line to make the logic simpler. 

To distinguish between runs and sequences, a run of n bytes is given the count 1 - n, while a sequence of j bytes is given the count j - 1. The example below shows the RLE encoding for a series of bytes that has five occurrences of the byte A and then the sequence BCDE. The run is encoded as the count -4 followed by the value A, and the sequence is encoded as the count 3 followed by the values BCDE. 


	Original:  AAAAABCDE
	Encoded:  -4A3BCDE

C code to do RLE decoding from a file appears below: 


	for (y = 0; y < HEIGHT; y++)
	  {
	    int x = 0;
	    while ( x < WIDTH )
	      {
	        int count = fgetc (infile);
	        if (count < 0 )            /* Process a run */
	         {
	            int i = 1 - count;
	            char c = fgetc (infile);
	            while ( i-- )
	              image[x++][y] = c;
	          }
	        else                        /* Process a sequence */
	         {
	            int i = count + 1;
	            while ( i-- )
	              image[x++][y] = fgetc (infile);
	          }
	      }
		}

RLE encoding is more complex then decoding, as is common for many compression schemes. This is because any input stream can be encoded in many different ways, and it is often difficult to determine the optimal encoding. Marv Luse, the author of my main source for this document, argues that the compression gains usually aren't worth writing a fully optimal encoder, since it is much more work and much slower. Instead he argues for using a fairly intelligent but simple encoder. 


http://www.flipcode.com/cgi-bin/msg.cgi?showThread=COTD-RLECompDecomp&forum=cotd&id=-1
/******************************************************************************
 * LoadRLE / SaveRLE - Load and save binary data using RLE compression.
 *	Run-length tokens have a set MSB, while data tokens have a cleared
 *	MSB. The value of the token's remaining bits plus one indicates the
 *	length of the block. The minimum run length is three bytes, while
 *	the maximum is 128.
 *
 *	data - Array holding data to load or save.
 *	size - Size of the data array.
 *	file - The file pointer to use.
 *	return - Total number of bytes read from or written to data[].
 */

size_t LoadRLE (unsigned char data[], size_t size, FILE *file)
{
	unsigned char token;
	unsigned int length;
	size_t total = 0;

	while(size && fread(&token, 1, 1, file)){
		length = (token & ~0x80) + 1;
		if (length > size)
			return total;
		if(token & 0x80){
			if(!fread(&token, 1, 1, file))
				return total;
			memset(data, token, length);
		}else{
			if(fread(data, 1, length, file) != length)
				return total;
		}
		data += length, size -= length, total += length;
	}
	return total;
}

/*************************************/

size_t SaveRLE (unsigned char data[], size_t size, FILE *file)
{
	unsigned char token;
	unsigned int i;
	size_t total = 0;

	while(size)
	{
		/*This loop identifies blocks of repeating data:*/
		i = 2;
		while(i < size && i < 128 &&
			data[i] == data[i - 1] && data[i - 1] == data[i - 2])
			i++;
		/*If repeating data was found, save it:*/
		if(i > 2){
			token = i - 1 | 0x80;
			if(!fwrite(&token, 1, 1, file))
				return total;
			if(!fwrite(data, 1, 1, file))
				return total;
			data += i, size -= i, total += i;
		}

		/*This loop identifies blocks of non-repeating data:*/
		i = 0;
		while(i < size && i < 128 && (i + 2 > size ? 1 :
			data[i] != data[i + 1] || data[i + 1] != data[i + 2]))
			i++;
		/*If non-repeating data was found, save it:*/
		if(i){
			token = i - 1;
			if(!fwrite(&token, 1, 1, file))
				return total;
			if(fwrite(data, 1, i, file) != i)
				return total;
			data += i, size -= i, total += i;
		}
	}

	return total;
}


